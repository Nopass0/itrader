#!/usr/bin/env tsx
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 */

import { PrismaClient } from '../generated/prisma';
import { BybitP2PManagerService } from '../src/services/bybitP2PManager';
import { CleanupAdvertisementsService } from '../src/services/cleanupAdvertisementsService';
import { createLogger } from '../src/logger';

const prisma = new PrismaClient();
const logger = createLogger('TestCleanup');

async function main() {
  try {
    logger.info('Starting cleanup test...');
    console.log('üß™ Testing Cleanup Advertisements Service...\n');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
    const beforeStats = await prisma.transaction.count({
      where: {
        status: { in: ['cancelled', 'cancelled_by_counterparty', 'failed', 'stupid'] },
        advertisementId: { not: null }
      }
    });

    console.log(`üìä Found ${beforeStats} cancelled transactions with advertisements\n`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    console.log('üöÄ Initializing services...');
    const bybitManager = new BybitP2PManagerService();
    await bybitManager.initialize();
    
    const cleanupService = new CleanupAdvertisementsService(bybitManager);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
    console.log('üßπ Running cleanup...\n');
    await cleanupService.forceCleanup();

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    const afterStats = await prisma.transaction.count({
      where: {
        status: { in: ['cancelled', 'cancelled_by_counterparty', 'failed', 'stupid'] },
        advertisementId: { not: null }
      }
    });

    console.log(`\n‚úÖ Cleanup completed!`);
    console.log(`üìä Remaining transactions with advertisements: ${afterStats}`);
    console.log(`üóëÔ∏è  Cleaned up ${beforeStats - afterStats} advertisements`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (beforeStats > afterStats) {
      const cleanedTransactions = await prisma.transaction.findMany({
        where: {
          status: { in: ['cancelled', 'cancelled_by_counterparty', 'failed', 'stupid'] },
          advertisementId: null
        },
        take: 5,
        orderBy: { updatedAt: 'desc' }
      });

      console.log('\nüìã Recently cleaned transactions:');
      cleanedTransactions.forEach(tx => {
        console.log(`  - ${tx.orderId} (${tx.status}) - cleaned at ${tx.updatedAt.toLocaleString()}`);
      });
    }

  } catch (error) {
    logger.error('Test failed', error as Error);
    console.error('‚ùå Test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();