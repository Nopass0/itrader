import * as fs from 'fs/promises';
import { extractTextFromPdfBuffer } from './src/ocr/utils/textExtractor';

async function analyzeReceiptFields() {
  const receipts = [
    'data/receipts/receipt_2025-06-19T14-32-58_Receipt.pdf',
    'data/receipts/receipt_2025-06-19T14-40-12_Receipt.pdf'
  ];
  
  for (const receipt of receipts) {
    console.log(`\n${'='.repeat(80)}`);
    console.log(`üìÑ Analyzing: ${receipt}`);
    console.log('='.repeat(80));
    
    const buffer = await fs.readFile(receipt);
    const text = await extractTextFromPdfBuffer(buffer);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = text.split('\n').map(l => l.trim()).filter(l => l);
    
    console.log('\nüìã All lines with indices:');
    lines.forEach((line, idx) => {
      console.log(`[${idx.toString().padStart(2, '0')}] ${line}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\nüîç Field analysis:');
    
    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    const dateTimeMatch = text.match(/(\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}:\d{2})/);
    console.log(`DateTime: ${dateTimeMatch ? dateTimeMatch[1] : 'NOT FOUND'}`);
    
    // –ò—Ç–æ–≥–æ
    const totalIdx = lines.findIndex(l => l === '–ò—Ç–æ–≥–æ');
    if (totalIdx !== -1 && totalIdx + 2 < lines.length) {
      console.log(`Total (–ò—Ç–æ–≥–æ): ${lines[totalIdx + 2]}`);
    }
    
    // –¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞
    const transferTypeIdx = lines.findIndex(l => l === '–ü–µ—Ä–µ–≤–æ–¥');
    if (transferTypeIdx !== -1 && transferTypeIdx + 2 < lines.length) {
      console.log(`Transfer Type: ${lines[transferTypeIdx + 2]}`);
    }
    
    // –°—Ç–∞—Ç—É—Å
    const statusIdx = lines.findIndex(l => l === '–°—Ç–∞—Ç—É—Å');
    if (statusIdx !== -1 && statusIdx + 2 < lines.length) {
      console.log(`Status: ${lines[statusIdx + 2]}`);
    }
    
    // –°—É–º–º–∞
    const amountIdx = lines.findIndex(l => l === '–°—É–º–º–∞');
    if (amountIdx !== -1 && amountIdx + 2 < lines.length) {
      console.log(`Amount (–°—É–º–º–∞): ${lines[amountIdx + 2]}`);
    }
    
    // –í—Å–µ –ø–æ–ª—è —Å –ª–µ–π–±–ª–∞–º–∏
    const labelFields = [
      '–ö–æ–º–∏—Å—Å–∏—è',
      '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', 
      '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
      '–ü–æ–ª—É—á–∞—Ç–µ–ª—å',
      '–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
      '–°—á–µ—Ç —Å–ø–∏—Å–∞–Ω–∏—è'
    ];
    
    console.log('\nüìä Label-based fields:');
    for (const label of labelFields) {
      const idx = lines.findIndex(l => l === label);
      if (idx !== -1) {
        // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ª–µ–π–±–ª–∞
        let value = 'NOT FOUND';
        for (let i = idx + 1; i < lines.length; i++) {
          const line = lines[i];
          // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –¥—Ä—É–≥–æ–π –ª–µ–π–±–ª, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
          if (labelFields.includes(line) || line === '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏' || line === '–°–ë–ü') {
            break;
          }
          // –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
          value = line;
          break;
        }
        console.log(`${label}: ${value}`);
      }
    }
    
    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationIdx = lines.findIndex(l => l === '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏');
    if (operationIdx !== -1 && operationIdx + 1 < lines.length) {
      console.log(`\nOperation ID: ${lines[operationIdx + 1]}`);
    }
    
    // –°–ë–ü –∫–æ–¥
    const sbpIdx = lines.findIndex(l => l === '–°–ë–ü');
    if (sbpIdx !== -1 && sbpIdx + 1 < lines.length) {
      console.log(`SBP Code: ${lines[sbpIdx + 1]}`);
    }
    
    // –ö–≤–∏—Ç–∞–Ω—Ü–∏—è
    const receiptMatch = text.match(/–ö–≤–∏—Ç–∞–Ω—Ü–∏—è\s*‚Ññ\s*([\d-]+)/);
    console.log(`Receipt Number: ${receiptMatch ? receiptMatch[1] : 'NOT FOUND'}`);
    
    // Email –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportMatch = text.match(/–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\s+(\S+@\S+)/);
    console.log(`Support Email: ${supportMatch ? supportMatch[1] : 'NOT FOUND'}`);
  }
}

analyzeReceiptFields();