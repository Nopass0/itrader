import { PrismaClient } from './generated/prisma';

const prisma = new PrismaClient();

async function sendPaymentDetailsManually() {
  console.log('üì§ Sending payment details manually\n');
  
  try {
    const orderId = '1935774322475847680';
    
    // –ù–∞–π–¥–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    let transaction = await prisma.transaction.findFirst({
      where: { orderId },
      include: {
        advertisement: {
          include: {
            bybitAccount: true
          }
        },
        payout: true
      }
    });
    
    if (!transaction) {
      console.log('‚ùå No transaction found for order', orderId);
      
      // –ù–∞–π–¥–µ–º advertisement
      const ad = await prisma.advertisement.findFirst({
        where: { bybitAdId: '1935760227540914176' },
        include: {
          bybitAccount: true,
          payout: true
        }
      });
      
      if (!ad) {
        console.log('‚ùå No advertisement found');
        return;
      }
      
      // –°–æ–∑–¥–∞–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      transaction = await prisma.transaction.create({
        data: {
          orderId,
          advertisementId: ad.id,
          payoutId: ad.payoutId,
          amount: 3226,
          counterpartyName: 'CyberExc',
          status: 'chat_started',
          chatStep: 0
        },
        include: {
          advertisement: {
            include: {
              bybitAccount: true
            }
          },
          payout: true
        }
      });
      
      console.log('‚úÖ Transaction created:', transaction.id);
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    const paymentDetails = `–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:
–ë–∞–Ω–∫: –¢-–ë–∞–Ω–∫
–ö–∞—Ä—Ç–∞: 2200 0000 0000 0000

–°—É–º–º–∞: 3226 RUB

Email –¥–ª—è —á–µ–∫–∞: receipts@example.com

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ—á—Ç—ã –±–∞–Ω–∫–∞.`;

    console.log('üìù Payment details to send:');
    console.log(paymentDetails);
    console.log('');
    
    // –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –ë–î –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if (transaction.advertisement?.bybitAccount) {
      console.log('üìù Saving payment details for chat automation...');
      
      // –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await prisma.transaction.update({
        where: { id: transaction.id },
        data: {
          status: 'chat_started',
          chatStep: 1, // –ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
          paymentDetails: JSON.stringify({
            bank: '–¢-–ë–∞–Ω–∫',
            card: '2200000000000000',
            amount: 3226,
            email: 'receipts@example.com'
          })
        }
      });
      
      // –°–æ–∑–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥–∞" –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
      await prisma.chatMessage.create({
        data: {
          transactionId: transaction.id,
          messageId: `buyer_${Date.now()}`,
          content: '–¥–∞',
          isFromUs: false,
          isProcessed: false // –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
      });
      
      console.log('\n‚úÖ Transaction prepared for payment details sending');
      console.log('‚úÖ Created unprocessed "–¥–∞" message to trigger automation');
      console.log('\n‚è≥ The chat processor should pick this up and send payment details');
      console.log('   Watch the logs for chat automation activity...');
      
    } else {
      console.log('‚ùå No Bybit account found for transaction');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

sendPaymentDetailsManually();