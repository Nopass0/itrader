import { PrismaClient } from './generated/prisma';

const prisma = new PrismaClient();

async function fixChatProcessor() {
  console.log('üîß Fixing Chat Processor\n');
  
  try {
    // –í–µ—Ä–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const message = await prisma.chatMessage.findFirst({
      where: {
        content: '–¥–∞',
        transactionId: 'cmc3ovhoxgnxa65aikqi'
      }
    });

    if (message) {
      await prisma.chatMessage.update({
        where: { id: message.id },
        data: { isProcessed: false }
      });
      
      console.log('‚úÖ Message marked as unprocessed again');
      console.log(`   Transaction: ${message.transactionId}`);
      console.log(`   Content: "${message.content}"`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const unprocessed = await prisma.chatMessage.count({
      where: { isProcessed: false }
    });

    console.log(`\nüìä Total unprocessed messages: ${unprocessed}`);
    console.log('\nüîÑ Now the Chat Processor should pick up and process this message automatically');
    console.log('   Watch the logs for: "[ChatProcessor]" messages');
    console.log('   Or: "üîç Checking for unprocessed messages"');

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixChatProcessor();