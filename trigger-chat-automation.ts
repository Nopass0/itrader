import { PrismaClient } from './generated/prisma';

const prisma = new PrismaClient();

async function triggerChatAutomation() {
  console.log('üöÄ Triggering chat automation for order 1935774322475847680\n');
  
  try {
    // –ù–∞–π–¥–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await prisma.transaction.findFirst({
      where: { orderId: '1935774322475847680' },
      include: {
        chatMessages: true,
        payout: true
      }
    });
    
    if (!transaction) {
      console.log('‚ùå Transaction not found');
      return;
    }
    
    console.log('‚úÖ Transaction found:', transaction.id);
    console.log('   Status:', transaction.status);
    console.log('   Chat Step:', transaction.chatStep);
    console.log('   Messages:', transaction.chatMessages.length);
    
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ payout
    if (transaction.payout) {
      if (!transaction.payout.wallet || !transaction.payout.recipientCard) {
        console.log('\n‚ö†Ô∏è  Updating payout with payment details...');
        
        await prisma.payout.update({
          where: { id: transaction.payout.id },
          data: {
            amount: 3226,
            wallet: '2200000000000000',
            recipientCard: '2200000000000000',
            recipientName: '–ò–í–ê–ù –ò–í–ê–ù–û–í',
            bank: {
              label: '–¢-–ë–∞–Ω–∫',
              name: '–¢-–ë–∞–Ω–∫'
            },
            trader: {
              phone: '+79001234567'
            }
          }
        });
        
        console.log('‚úÖ Payout updated with payment details');
      }
    }
    
    if (transaction.chatStep === 0) {
      console.log('\nüì® Creating buyer message to trigger automation...');
      
      // –°–æ–∑–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      await prisma.chatMessage.create({
        data: {
          transactionId: transaction.id,
          messageId: `buyer_${Date.now()}`,
          content: '–ü—Ä–∏–≤–µ—Ç',
          message: '–ü—Ä–∏–≤–µ—Ç',
          sender: 'buyer',
          messageType: 'TEXT',
          isProcessed: false
        }
      });
      
      console.log('‚úÖ Created unprocessed message from buyer');
      console.log('\n‚è≥ Chat processor should pick this up and start automation');
      
    } else if (transaction.chatStep === 1) {
      console.log('\nüì® Creating "–¥–∞" message to trigger payment details...');
      
      // –°–æ–∑–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥–∞"
      await prisma.chatMessage.create({
        data: {
          transactionId: transaction.id,
          messageId: `buyer_yes_${Date.now()}`,
          content: '–¥–∞',
          message: '–¥–∞',
          sender: 'buyer',
          messageType: 'TEXT',
          isProcessed: false
        }
      });
      
      console.log('‚úÖ Created "–¥–∞" message from buyer');
      console.log('\n‚è≥ Chat processor should send payment details now');
      
    } else {
      console.log('\n‚úÖ Chat step:', transaction.chatStep);
      console.log('   Automation already in progress');
    }
    
    console.log('\nüìä Watch the application logs for:');
    console.log('   - "üîç Checking for unprocessed messages"');
    console.log('   - "üì® Found unprocessed messages"');
    console.log('   - "üöÄ Attempting to start automation"');
    console.log('   - "üì§ Sending initial message"');
    console.log('   - "üí≥ Preparing to send payment details"');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

triggerChatAutomation();